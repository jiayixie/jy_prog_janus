using namespace std;
int write_ASCdisp_single(dispdef disp, FILE *outdisp){
  int i;
  printf("begin write ASCdisp_single npper=%d ngper=%d\n",disp.npper,disp.ngper);
  if(disp.npper>0)
  {
   if(disp.ngper>0)//write both
      {for(i=0;i<disp.npper;i++) // ATTENTION!! Here, by default, pper and gper are equal!!!! Otherwise, the writing part need to be changed!!!!
        fprintf(outdisp,"%5g ph %10g %10g %10g gp %10g %10g %10g\n",disp.pper[i],disp.pvelo[i],disp.pvel[i],disp.unpvelo[i],disp.gvelo[i],disp.gvel[i],disp.ungvelo[i]);}//if ngper>0
   else
      {for(i=0;i<disp.npper;i++) fprintf(outdisp,"%5g ph %10g %10g %10g gp 0 0 0\n",disp.pper[i],disp.pvelo[i],disp.pvel[i],disp.unpvelo[i]); }
 }//if npper>0
 else if (disp.ngper>0)
      {for(i=0;i<disp.ngper;i++)fprintf(outdisp,"%5g ph 0 0 0 gp %10g %10g %10g\n",disp.gper[i],disp.gvelo[i],disp.gvel[i],disp.ungvelo[i]);}

return 1;
}//write_ASCdisp_single

/*--------------------------------
int write_ASCAZdisp_single(dispdef AMPdisp, dispdef PHIdisp, FILE *outdisp,dispdef RAdisp){
  // right now, only write the phvel part	
  int i;
  if(AMPdisp.npper!=PHIdisp.npper){
  	printf("###  write_ASCAZdisp_single, AMPdisp.npper!=PHIdisp.npper\n");
	exit(0);
  }
  for(i=0;i<AMPdisp.npper;i++){
  	if(fabs(AMPdisp.pper[i]-PHIdisp.pper[i])>0.01){
		printf("###  write_ASCAZdisp_single,AMPdisp.pper(%g)!=PHIdisp.pper(%g)\n",AMPdisp.pper[i],PHIdisp.pper[i]);
		exit(0);
	}
	fprintf(outdisp,"%5g amp %10g %10g %10g phi %10g %10g %10g\n",AMPdisp.pper[i],AMPdisp.pvelo[i]/RAdisp.pvelo[i]*200,AMPdisp.pvel[i]/RAdisp.pvel[i]*200,AMPdisp.unpvelo[i],PHIdisp.pvelo[i],PHIdisp.pvel[i],PHIdisp.unpvelo[i]);
	//fprintf(outdisp,"%5g amp %10g %10g %10g phi %10g %10g %10g isovel %10g\n",AMPdisp.pper[i],AMPdisp.pvelo[i],AMPdisp.pvel[i],AMPdisp.unpvelo[i],PHIdisp.pvelo[i],PHIdisp.pvel[i],PHIdisp.unpvelo[i],RAdisp.pvelo[i]);
  }//for i
  	  
  return 1;
}//write_ASCAZdisp_single
//-------------------------------------------------------------------
*/
int write_ASCAZdisp_single(dispdef AMPdisp, dispdef PHIdisp, FILE *outdisp,dispdef RAdisp){
  //write both amp and phi disp. they may have different period content
  int i,j;
  printf("test-- amp %d  phi %d\n",AMPdisp.npper,PHIdisp.npper);
  if(AMPdisp.npper>PHIdisp.npper){
  	for(i=0;i<AMPdisp.npper;i++){
		if(i<PHIdisp.npper)
			fprintf(outdisp,"amp %5g %10g %10g %10g  phi %5g %10g %10g %10g\n",AMPdisp.pper[i],AMPdisp.pvelo[i]/RAdisp.pvelo[i]*200,AMPdisp.pvel[i]/RAdisp.pvelo[i]*200,AMPdisp.unpvelo[i],PHIdisp.pper[i],PHIdisp.pvelo[i],PHIdisp.pvel[i],PHIdisp.unpvelo[i]);
		else{
			fprintf(outdisp,"amp %5g %10g %10g %10g  phi %5g %10g %10g %10g\n",AMPdisp.pper[i],AMPdisp.pvelo[i]/RAdisp.pvelo[i]*200,AMPdisp.pvel[i]/RAdisp.pvelo[i]*200,AMPdisp.unpvelo[i],0.,0.,0.,0.);
			
		}
	}//for i

  }//if
  else{
	for(i=0;i<PHIdisp.npper;i++){
		if(i<AMPdisp.npper){
			fprintf(outdisp,"amp %5g %10g %10g %10g  phi %5g %10g %10g %10g\n",AMPdisp.pper[i],AMPdisp.pvelo[i]/RAdisp.pvelo[i]*200,AMPdisp.pvel[i]/RAdisp.pvelo[i]*200,AMPdisp.unpvelo[i],PHIdisp.pper[i],PHIdisp.pvelo[i],PHIdisp.pvel[i],PHIdisp.unpvelo[i]);
		}
		else{
			fprintf(outdisp,"amp %5g %10g %10g %10g  phi %5g %10g %10g %10g\n",0.,0.,0.,0.,PHIdisp.pper[i],PHIdisp.pvelo[i],PHIdisp.pvel[i],PHIdisp.unpvelo[i]);
		}
	}//for i

  }//else
  return 1;
}
//-------------------------------------------------------------------
//int write_ASC(modeldef model,paradef para,char *namemod,char *Rnamedisp,char *Lnamedisp,char *AZRnamedisp, char *AZLnamedisp, int Rsurflag, int Lsurflag, int RAZflag, int LAZflag)
int write_ASC(modeldef model,paradef para,char *Rnamedisp,char *Lnamedisp,char *AZRnamedisp, char *AZLnamedisp, int Rsurflag, int Lsurflag, int RAZampflag, int LAZampflag,int RAZphiflag, int LAZphiflag)
{
  FILE *outmod,*Routdisp,*Loutdisp;
  FILE *AZRoutdisp, *AZLoutdisp;
  int i;
  /*if((outmod=fopen(namemod,"w"))==NULL)
  {
   printf("Cannot open file to write %s!!!\n",namemod);
   exit(0);
  }
  */

  /*fprintf(outmod,"misfit:%g %g %g %g %g L: %g %g %g %g %g\n",model.data.misfit,model.data.Rdisp.pmisfit,model.data.Rdisp.gmisfit,model.data.Ldisp.pmisfit,model.data.Ldisp.gmisfit,model.data.L,model.data.Rdisp.pL,model.data.Rdisp.gL,model.data.Ldisp.pL,model.data.Ldisp.gL);
  fprintf(outmod,"%d %d %d %d\n",para.Rnpara,para.Lnpara,model.ngroup,model.laym0.nlayer);
  for(i=0;i<para.Rnpara;i++)
        fprintf(outmod,"%10g %10g",para.Rparameter[i],para.Lparameter[i]);
  fprintf(outmod,"\n");
  for(i=0;i<model.laym0.nlayer;i++)
        fprintf(outmod,"%10g %10g %10g %10g %10g %10g %10g %10g\n",model.laym0.thick[i],model.laym0.vsv[i],model.laym0.vsh[i],model.laym0.vp[i],model.laym0.rho[i],model.laym0.qs[i],model.laym0.qp[i],model.laym0.vpvs[i]);
  fclose(outmod);
  */

  if(Rsurflag>0){
	  
  	if((Routdisp=fopen(Rnamedisp,"w"))==NULL)
  	{
   	printf("Cannot open file to write %s!!!\n",Rnamedisp);
   	exit(0);
  	}
	printf("Rsurflag>0, npper=%d ngper=%d\n",model.data.Rdisp.npper,model.data.Rdisp.ngper);
	write_ASCdisp_single(model.data.Rdisp, Routdisp);
  	fclose(Routdisp);
  }
  if(Lsurflag>0){
  	if((Loutdisp=fopen(Lnamedisp,"w"))==NULL)
 	 {
   	printf("Cannot open file to write %s!!!\n",Lnamedisp);
   	exit(0);
  	}
	write_ASCdisp_single(model.data.Ldisp, Loutdisp);
  	fclose(Loutdisp);
  }
  if(RAZampflag>0 or RAZphiflag>0){
  	if((AZRoutdisp=fopen(AZRnamedisp,"w"))==NULL){
		printf("Cannot open file to write %s!!!\n",AZRnamedisp);
		exit(0);
	}
	write_ASCAZdisp_single(model.data.AziampRdisp,model.data.AziphiRdisp,AZRoutdisp,model.data.Rdisp);
	fclose(AZRoutdisp);
  }

  if(LAZampflag>0 or LAZphiflag>0){
  	if((AZLoutdisp=fopen(AZLnamedisp,"w"))==NULL){
		printf("Cannot open file to write %s!!!\n",AZLnamedisp);
		exit(0);
	}
	write_ASCAZdisp_single(model.data.AziampLdisp,model.data.AziphiLdisp,AZLoutdisp,model.data.Ldisp);
	fclose(AZLoutdisp);
  }

  return 1;
}


//-------------------------------------------------------------------

int write_initmodAniso(char *foutnm,modeldef model){
//write initial model that would be used as input model for MC inversion
  int i,j;
  FILE *fout;
  if((fout=fopen(foutnm,"w"))==NULL){cout<<"### cannot open file to write "<<foutnm<<endl;exit(0);}
  for(i=0;i<model.ngroup;i++){
	fprintf(fout,"%5d %5d %5d %5d %8g %5d",i,model.groups[i].flag,7,model.groups[i].flagcpttype, model.groups[i].thick,model.groups[i].np);	  
        for(j=0;j<model.groups[i].np;j++)
	  fprintf(fout," %8g %8g %8g %8g %8g %8g %8g",model.groups[i].vsvvalue[j],model.groups[i].vshvalue[j],model.groups[i].vpvvalue[j],model.groups[i].vphvalue[j],model.groups[i].etavalue[j],model.groups[i].thetavalue[j],model.groups[i].phivalue[j]);		
	// there was a bug here, fixed on May 22,2012
	if(model.groups[i].flag==1){//layered model
		for(j=0;j<model.groups[i].np;j++)
			fprintf(fout," %8g",model.groups[i].ratio[j]);}
	fprintf(fout," %8g\n",model.groups[i].vpvs);
  }//for i
  fclose(fout);
  return 1;
}
/*
//-------------------------------------------------------------------
int write_initmodAniso(char *foutnm,modeldef model){
//write initial model that would be used as input model for MC inversion
  int i,j;
  FILE *fout;
  if((fout=fopen(foutnm,"w"))==NULL){cout<<"### cannot open file to write "<<foutnm<<endl;exit(0);}
  for(i=0;i<model.ngroup;i++){
        fprintf(fout,"%5d %5d %8g %5d",i,model.groups[i].flag,model.groups[i].thick,model.groups[i].np);
        for(j=0;j<model.groups[i].np;j++)
          fprintf(fout," %8g %8g",model.groups[i].Rvalue[j],model.groups[i].Lvalue[j]);
	// there was a bug here, fixed on May 22,2012
	if(model.groups[i].flag==1){//layered model
		for(j=0;j<model.groups[i].np;j++)
			fprintf(fout," %8g",model.groups[i].ratio[j]);}
        fprintf(fout," %8g\n",model.groups[i].vpvs);
  }//for i
  fclose(fout);
  return 1;
}
*/
