       PROGRAM RAY3D
C
C *********************************************************************
C *** NOTE SOME SLIGHT CHANGES WERE REQUIRED TO THE CODE FOR THIS
C *** PROGRAM TO OPERATE PROPERLY ON A VAX (VMS)
C *** SEE CHANGES DESCRIBED BELOW      JUNE/89 
C *********************************************************************
C
C    CALCULATES TRAVEL TIMES, AZIMUTHAL ANOMALIES, RAY PARAMETER 
C      ANOMALIES FOR PRIMARY AND MULTIPLE CONVERTED WAVES 
C      IN A DIPPING STRUCTURE, IMPLEMENTATION OF THE METHOD OF 
C      LANGSTON (1977; BSSA) 
C
C    WRITTEN BY T.J. OWENS, MARCH 1982, REVISED INNUMERABLE TIMES 
C                                       SINCE THEN 
C    VERSION A-0; DISTRIBUTED MARCH 1987 TO UC-SB AND UBC 
C ********************************************************************
C  NOTE: THIS VERSION MODIFIED BY JFC JUNE/88 BASED ON INFO PROVIDED
C        BY T.J. OWENS
C        ALSO SAC FORMAT FILES ARE WRITTEN USING OUR OWN ROUTINE
C ********************************************************************
C
      DIMENSION STRIKE(100),DIP(100),Z(100),ALPHA(100),BETA(100), 
     *          RHO(100),ETA(3,100),Q(3,5000),Q0(3),V(2,100),QV(5000), 
     *          DIST(3),QLOC1(3),QLOC2(3),A(3,3),IFACE(5000),LAYER(100), 
     *          MULYR(100),AMAG(3,5000),HMAG(3,5000),RAYMAG(3,5000), 
     *          RAYHIL(3,5000),EXMULS(100),RAYTIM(5000),SPIKE(1200,3), 
     *          SYNTH(4100),DIRECT(3),HILBT(1200,3),SYNHIL(4100) 
      LOGICAL YES,YESNO,PORS,AGAIN,AMPS,PPPS(100),FREE,INSTRM,QCORR, 
     *        MORMUL(100),AMPS1,PPS2,MORMU2 
      INTEGER TRANS,REFL,TYPE,IOR(3),BLANK,EXMULS,IPPPS(100),OUNIT 
      INTEGER LLL 
      CHARACTER STRUC*32,SYNOUT*32,TITLE*32,COMP(3)*4,SPN(3)*6,SYN(3)*6, 
     *          NAME*32 
C ********************************************************************** 
C
C COMMON BLOCK INFO FOR LINK WITH SUBROUTINE SACIO 
C
      REAL RINSTR 
      INTEGER YEAR,JDAY,HOUR,MIN,ISEC,MSEC 
       INTEGER SINUNT,SOUNIT
      CHARACTER*8 STA,CMPNM,KEVNM,KINST
      COMMON/HDR/DMIN,DMAX,DMEAN,CAZ,CINC,BAZ,DELTA,RAYP,DEPTH,DECON,
     :              AGAUSS,C,TQ,RINSTR,DLEN,BEGIN,T0,T1,T2,
     :          YEAR,JDAY,HOUR,MIN,ISEC,MSEC,STA,CMPNM,KEVNM
      COMMON /HDRB/ KINST,STLA,STLO,EVLA,EVLO,O,DD,AZI,ET
CCC   COMMON/SINOUT/INUNIT,OUNIT
C
C ************************************************************************** 
C
C   PARAMETER DEFINITIONS MAY BE FOUND SACIO COMMENTS 
C
      COMMON /CORD/ A 
      COMMON /AMCAL/ QLOC1,QLOC2,VB,VA,SINIB,SINIA,VP1,VS1,RHO1, 
     *               VP2,VS2,RHO2,FREE,TYPE 
      COMMON /TRANSM/ Q,QV,V,ALPHA,BETA,RHO,STRIKE,DIP,IFACE,JHILB, 
     *                AMAG,HMAG,LAYER,AMPS,TRANS,REFL,NLYRS 
      COMMON /RAYWRT/ ETA,Z,RAYMAG,RAYHIL,RAYTIM,NTIM,P0R,PORS, 
     *                OLDLYR,Q0,DIRECT,TDIREC,BAZ1 
      COMMON /AR5/ EXMULS,PPPS,MORMUL,IPPPS 
      COMMON /AR4/ SYNHIL 
      COMMON /AR3/ HILBT 
      COMMON /AR2/ SYNTH 
      COMMON /AR1/ SPIKE 
      COMMON /INNOUT/ INUNIT,OUNIT 
      COMMON /SINOUT/ SINUNT,SOUNIT
C
C  RAY3D GENERATES SPECIFIC OUTPUT FILE NAMES FOR SYNTHETICS 
C    SPIKE SERIES ARE NAMED "SPIKE NAME"_SP.]ZRT( 
C    IF SYNTHETIC IS CONVOLVED WITH A SOURCE FUNCTION, 
C    THE SYNTHETIC IS "SYNTHETIC NAME"_SY.]ZRT( 
C    WHERE "SPIKE NAME" AND "SYNTHETIC NAME" ARE REQUESTED BY 
C    THE PROGRAM. 
C
      DATA COMP/'VERT','RAD ','TANG'/,IOR/3,1,2/, 
     *     SPN/'_SP.Z ','_SP.R ','_SP.T '/, 
     *     SYN/'_SY.Z ','_SY.R ','_SY.T '/ 
      RAD(DEG)=DEG/57.2957795 
      INUNIT=5 
      OUNIT=6 
C
C *** INITIALIZE HEADER VARIABLES USED IN THE SAC FILE
      KINST='  GURALP'
      STLA=-12345.
      DELTA=-12345.
      STLO=-12345.
      EVLA=-12345.
      EVLO=-12345.
      O=-12345.
      AZI=-12345.
      DD=-12345.
C
C
C  SIGNAL IS A RIDGE ROUTINE USED TO REQUEST THAT 
C  FLOATING POINT UNDERFLOWS BE IGNORED, THIS WILL 
C  PROBABLY BE DELETED ON MOST MACHINES 
C
 
C     CALL INIOCM 
      WRITE(OUNIT,120) 
      OPEN(UNIT=8,FILE='RAMPS',STATUS='NEW',FORM='FORMATTED') 
C
C   ALL OUTPUT IS TO FILE RAY3D.OUT 
C
      OPEN(UNIT=9,FILE='ROUT',STATUS='NEW',FORM='FORMATTED') 
      REWIND 9 
      WRITE(9,120) 
      AGAIN=.FALSE. 
  120 FORMAT(' RAY TRACER FOR DIPPING STRUCTURES',/) 
      CALL ASKTXT('SPECIFY STRUCTURE FILE: ',STRUC) 
      CALL RDLYRS(STRUC,NLYRS,TITLE,ALPHA,BETA,RHO,Z, 
     *            DUM1,DUM2,STRIKE,DIP,-1,IER) 
C
C     ADJUST INPUT VALUES FROM RDLYRS TO NECESSARY FORM 
C
      TMPZ1=Z(1) 
      Z(1)=0. 
      TMPS1=STRIKE(1) 
      STRIKE(1)=0. 
      TMPD1=DIP(1) 
      DIP(1)=0. 
      DO 48 I48=2,NLYRS 
      TMPS2=STRIKE(I48) 
      TMPD2=DIP(I48) 
      STRIKE(I48)=TMPS1 
      DIP(I48)=TMPD1 
      TMPS1=TMPS2 
      TMPD1=TMPD2 
      TMPZ2=Z(I48) 
      Z(I48)=Z(I48-1)+TMPZ1 
      TMPZ1=TMPZ2 
   48 CONTINUE 
      WRITE(9,778) STRUC,TITLE,NLYRS 
      DO 49 I=1,NLYRS 
         WRITE(9,779) I,ALPHA(I),BETA(I),RHO(I),STRIKE(I),DIP(I),Z(I) 
   49 CONTINUE 
      WRITE(9,780) 
  778 FORMAT(' STRUCTURE FILE: ',A10,' MODEL ',A10,1X,I2,' LAYERS',/, 
     *       ' LAYER     VP    VS     DENS     STRIKE     DIP     Z') 
  779 FORMAT(3X,I2,4X,F4.2,3X,F4.2,5X,F4.2,5X,F6.2,4X,F4.1,4X,F5.1) 
  780 FORMAT(1X,/) 
C
C     ASK ALL INITIAL QUESTIONS 
C
    6 P0=ASK('SPECIFY RAY PARAM. FOR INCIDENT WAVE: ') 
      P0R=P0 
      RAYP=P0
      BAZ=ASK('BACK AZIMUTH OF INCIDENT RAY: ') 
      BAZ1=BAZ 
      PORS=YESNO('P-WAVE (Y OR N) ? ') 
      IF(PORS) GO TO 16 
         AMPS=.FALSE. 
         GO TO 15 
   16 AMPS=YESNO('CALCULATE ANY AMPLITUDES (Y OR N) ? ') 
      IF(.NOT.AMPS) GO TO 15 
         PPS2=YESNO('PP AND PS ONLY (Y OR N) ? ') 
         PAMP=ASK('INCIDENT P AMPLITUDE = ') 
   15 SINI=P0*ALPHA(NLYRS) 
      IF(.NOT.PORS) SINI=P0*BETA(NLYRS) 
      NUMINT = NLYRS -1 
      DO 22 I22=1,NUMINT 
         LAYER(I22)=I22+1 
         MULYR(I22)=0 
         PPPS(LAYER(I22))=.FALSE. 
         IF(PPS2) PPPS(LAYER(I22))=.TRUE. 
         MORMUL(LAYER(I22))=.FALSE. 
   22 CONTINUE 
   64 WRITE(OUNIT,107) 
  107 FORMAT(' YOUR LAYER RAY TRACING PARAMETERS ARE: ',//, 
     *       'INTERFACE  PPPS  MORMUL ') 
      DO 21 I21=1,NUMINT 
        WRITE(OUNIT,105) LAYER(I21),PPPS(LAYER(I21)),MORMUL(LAYER(I21)) 
   21 CONTINUE 
  105 FORMAT(5X,I3,5X,L1,5X,L1) 
      IF(YESNO('OK ? (Y OR N) ')) GO TO 18 
      WRITE(OUNIT,102) 
  102 FORMAT(' ENTER THE # OF INTERFACES TO TRACE FROM (I2)') 
      READ(INUNIT,103) NUMIN2 
      IF(NUMIN2.LE.0) GO TO 60 
      NUMINT=NUMIN2 
      WRITE(OUNIT,101) 
  101 FORMAT(' ENTER THE INTERFACE NUMBERS (40I2)') 
      READ(INUNIT,103) (LAYER(I),I=1,NUMINT) 
  103 FORMAT(40I2) 
   60 IF(.NOT.YESNO('CHANGE PPPS OPTIONS (Y OR N) ? ')) GO TO 70 
         WRITE(OUNIT,108) 
  108 FORMAT('ENTER INTERFACE #S WHICH NEED PPPS CHANGED FROM CURRENT', 
     *       ' VALUE (40I2) ') 
         READ(INUNIT,103) (IPPPS(I),I=1,40) 
         DO 71 I71=1,NUMINT 
            IF(IPPPS(I71).EQ.0) GO TO 70 
            IF(PPPS(IPPPS(I71))) THEN 
              PPPS(IPPPS(I71))=.FALSE. 
            ELSE 
              PPPS(IPPPS(I71))=.TRUE. 
            ENDIF 
   71 CONTINUE 
   70 MORMU2=YESNO('CALCULATE EXTRA MULTIPLES ? (Y OR N) ') 
      IF(.NOT.MORMU2) GO TO 69 
      WRITE(OUNIT,104) 
  104 FORMAT(' ENTER INTERFACE NUMBERS FOR EXTRA MULTIPLE', 
     *       '  CALCULATIONS (40I2)') 
      READ(INUNIT,103) (MULYR(I),I=1,30) 
      DO 20 I20=1,100 
         IF(MULYR(I20).NE.0) GO TO 20 
         NMULTS=I20-1 
         GO TO 61 
   20 CONTINUE 
   61 IF(NMULTS.EQ.0) GO TO 60 
      IF(YESNO('CALCULATE EXTRA MULTS FOR ALL RAYS ? ')) GO TO 62 
         WRITE(OUNIT,106) 
  106 FORMAT(' ENTER ONLY INTERFACES WHICH HAVE RAYS THAT NEED', 
     *       ' EXTRA MULTS TACKED ON') 
      READ(INUNIT,103) (EXMULS(I),I=1,40) 
      DO 72 I72=1,NLYRS 
   72 MORMUL(I72)=.FALSE. 
      DO 63 I63=1,40 
         IF(EXMULS(I63).EQ.0) GO TO 64 
         MORMUL(EXMULS(I63))=.TRUE. 
   63 CONTINUE 
   69 GO TO 64 
   62 DO 65 I65=1,NUMINT 
   65    MORMUL(LAYER(I65))=.TRUE. 
      GO TO 64 
   18 NRAYS=1 
      DO 181 I181=1,NUMINT 
         NR2=9 
         IF(PPPS(LAYER(I181))) NR2 = 1 
         IF(MORMUL(LAYER(I181))) NR2 = NR2 + NR2*4*NMULTS 
         NRAYS=NRAYS + NR2 
  181 CONTINUE 
      IF(NRAYS.LE.5000) GO TO 182 
        WRITE(OUNIT,183) NRAYS 
  183   FORMAT(' NRAYS = ',I5,' IS TOO BIG - TRY AGAIN ') 
        GO TO 64 
  182 IF(AGAIN) GO TO 14 
C
C   CALCULATE LAYER INTERFACE UNIT NORMAL VECTORS IN GLOBAL COORDINATES 
C
      DO 1 I1=1,NLYRS 
         STRIKE(I1)=RAD(STRIKE(I1)) 
         DIP(I1)=RAD(DIP(I1)) 
         CALL NORVEC(STRIKE(I1),DIP(I1),ETA(1,I1)) 
    1 CONTINUE 
C
C   DEFINE INCIDENT RAY UNIT VECTOR IN GLOBAL COORDINATES 
C
   14 Q0(1)=-SINI*COS(RAD(BAZ)) 
      Q0(2)=-SINI*SIN(RAD(BAZ)) 
      Q0(3)=-SQRT(1. - SINI*SINI) 
C
C   SET UP VELOCITY ARRAYS AND OTHER INITITAL CONDITIONS 
C
      DO 2 I2=1,NLYRS 
         IF(.NOT.PORS) GO TO 3 
            V(1,I2)=ALPHA(I2) 
            V(2,I2)=BETA(I2) 
            GO TO 2 
    3    V(1,I2)=BETA(I2) 
         V(2,I2)=ALPHA(I2) 
    2 CONTINUE 
      TRANS=1 
      REFL=-1 
      QV(1)=V(1,NLYRS) 
      IFACE(1)=0 
      DO 17 I17=1,3 
      CALL ZERO(AMAG(I17,1),1,5000) 
      CALL ZERO(AMAG(I17,1),1,5000) 
      Q(I17,1)=Q0(I17) 
      IF(.NOT.AMPS) GO TO 17 
      AMAG(I17,1)=PAMP*Q0(I17) 
      HMAG(I17,1)=0. 
      IF(I17.LT.3) GO TO 17 
         VP1=ALPHA(NLYRS) 
         VS1=BETA(NLYRS) 
         RHO1=RHO(NLYRS) 
         FREE=.FALSE. 
         NTIM=1 
   17 CONTINUE 
C
C   S T A R T   R A Y   T R A C I N G   S E C T I O N 
C
C   FIND RAY UNIT VECTORS FOR THE DIRECT RAY 
C
      IHILB=0 
      JHILB=0 
      IQ=1 
      CALL TRNSMT(1,NLYRS,IQ,1,.TRUE.) 
C
C   IF IQ= -999 THEN A HEAD WAVE HAS BEEN GENERATED AND THE RUN WILL BOMB 
C
      IF(IQ.EQ.-999) THEN 
         WRITE(OUNIT,133) 
  133    FORMAT(' IMMEDIATE PROBLEMS WITH HEAD WAVES ', 
     *          'ON DIRECT WAVE PASS - CHECK VELOCITY MODEL !!') 
         STOP 
      ENDIF 
      NLR=NLYRS 
      CALL RAYFIN(NLR,1,0,0,0,.TRUE.,.FALSE.) 
      AMPS1=AMPS 
C
C   CALCULATE THE OTHER RAYS, FIRST ALL THE UNCONVERTED RAYS & THEIR 
C     MULTIPLES, THEN THE CONVERTED WAVES & THEIR MULTIPLES 
C     LOOPS 50,52, & 53 DO EXTRA MULTIPLES, IF NECESSARY 
C
      DO 4 I4=1,2 
         DO 8 I8=1,NUMINT 
            AMPS=AMPS1 
C
C           IF DOING THE CONVERTED WAVES 
C               RECALCULATE THE NECESSARY Q-VECTORS 
C
            IF(I4.EQ.1) GO TO 13 
               IQ=NLYRS - LAYER(I8) + 1 
               IF(.NOT.AMPS) GO TO 28 
               VP1=ALPHA(NLYRS-IQ+1) 
               VS1=BETA(NLYRS-IQ+1) 
               RHO1=RHO(NLYRS-IQ+1) 
   28       LOOPST=IQ 
            CALL TRNSMT(LOOPST,NLYRS,IQ,I4,.TRUE.) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
            IF(IQ.EQ.-999) GO TO 8 
C
C           PRINT RESULTS FOR DIRECT CONVERTED WAVES 
C
            CALL RAYFIN(NLR,I4,0,0,LAYER(I8),.FALSE.,.FALSE.) 
                  IF(.NOT.MORMUL(LAYER(I8))) GO TO 13 
                  IQMUL=IQ 
                  DO 66 I66=1,NMULTS 
                     IF(MULYR(I66).EQ.LAYER(I8).AND. 
     *                 (.NOT.PPPS(LAYER(I8)))) GO TO 66 
                     IQI=IQMUL 
                     DO 67 I67=1,2 
                        VS1=BETA(1) 
                        VP1=ALPHA(1) 
                        RHO1=RHO(1) 
                        RHO2=0.0 
                        VP2=0. 
                        VS2=0. 
                        CALL RAYDWN(IQI,I67,MULYR(I66),IQ) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
                        IF(IQ.EQ.-999) GO TO 66 
                        MIQDWN=IQ 
                        DO 68 I68=1,2 
                           CALL RAYUP(MIQDWN,I68,MULYR(I66),IQ) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
                           IF(IQ.EQ.-999) GO TO 68 
                           CALL RAYFIN(IQ,0,I67,I68,MULYR(I66), 
     *                                 .FALSE.,.TRUE.) 
   68                   CONTINUE 
   67                CONTINUE 
   66             CONTINUE 
   13       IF(PPPS(LAYER(I8))) AMPS=.FALSE. 
            DO 10 I10=1,2 
               VS1=BETA(1) 
               VP1=ALPHA(1) 
               RHO1=RHO(1) 
               RHO2=0.0 
               VP2=0. 
               VS2=0. 
               CALL RAYDWN(NLYRS,I10,LAYER(I8),IQ) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
               IF(IQ.EQ.-999) GO TO 10 
               IQDOWN=IQ 
               DO 11 I11=1,2 
                  CALL RAYUP(IQDOWN,I11,LAYER(I8),IQ) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
                  IF(IQ.EQ.-999) GO TO 11 
                  CALL RAYFIN(IQ,I4,I10,I11,LAYER(I8),.FALSE.,.TRUE.) 
                  IF(.NOT.MORMUL(LAYER(I8))) GO TO 11 
                  IQMUL=IQ 
                  DO 50 I50=1,NMULTS 
                     IQI=IQMUL 
                     DO 52 I52=1,2 
                        VS1=BETA(1) 
                        VP1=ALPHA(1) 
                        RHO1=RHO(1) 
                        RHO2=0.0 
                        VP2=0. 
                        VS2=0. 
                        CALL RAYDWN(IQI,I52,MULYR(I50),IQ) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
                        IF(IQ.EQ.-999) GO TO 52 
                        MIQDWN=IQ 
                        DO 53 I53=1,2 
                           CALL RAYUP(MIQDWN,I53,MULYR(I50),IQ) 
C
C   IF IQ = -999, THEN PROBLEM PHASES EXIST -- THIS AND ALL SUBSEQUENT RAYS 
C                      ARE SKIPPED 
C
                           IF(IQ.EQ.-999) GO TO 53 
                           CALL RAYFIN(IQ,0,I52,I53,MULYR(I50), 
     *                                 .FALSE.,.TRUE.) 
   53                   CONTINUE 
   52                CONTINUE 
   50             CONTINUE 
   11          CONTINUE 
   10       CONTINUE 
    8    CONTINUE 
    4 CONTINUE 
      AMPS=AMPS1 
      IF(.NOT.AMPS) GO TO 29 
      NTIM=NTIM-1 
C
C  RAY3D.AMPS CAN BE A BIG FILE IF MANY RAYS ARE TRACED 
C     USE WITH CAUTION 
C
      YES=YESNO('CREATE RAY3D.AMPS ? ') 
      IF(.NOT.YES) GO TO 180 
      WRITE(8,788) STRUC,TITLE,NLYRS,P0R,BAZ 
  788 FORMAT(' FILE: ',A10,' MODEL ',A10,1X,I2,' LAYERS ', 
     *       ' RAY PARAMETER ',F7.5,' BACK AZ. ',F6.2) 
  180 DO 27 I27=1,NTIM 
         CALL RTOI(RAYMAG(1,I27),COS(RAD(BAZ)),SIN(RAD(BAZ)),-1., 
     *             .FALSE.) 
         CALL RTOI(RAYHIL(1,I27),COS(RAD(BAZ)),SIN(RAD(BAZ)),-1., 
     *             .FALSE.) 
         RAYHIL(3,I27)=-RAYHIL(3,I27) 
         RAYMAG(3,I27)=-RAYMAG(3,I27) 
         IF(YES) WRITE(8,122) I27,(RAYMAG(J,I27),J=1,3), 
     *                 (RAYHIL(J,I27),J=1,3),RAYTIM(I27) 
   27 CONTINUE 
  122 FORMAT(1X,I3,1X,7E15.7) 
      IF(JHILB.EQ.1) WRITE(OUNIT,781) 
  781 FORMAT(' PHASE SHIFTED ARRIVALS EXIST ') 
      YES=YESNO('SAVE THIS SPIKE ? ') 
      IF(.NOT.YES) GO TO 29 
      DT=ASK('SAMPLING RATE (SEC): ') 
      DURA=ASK('SIGNAL DURATION (SECS): ') 
      DELAY=ASK('FIRST ARRIVAL DELAY: ') 
      NPTS=IFIX(DURA/DT + .5) + 1. 
      BEGIN = 0. 
      DO 30 I30=1,3 
         CALL ZERO(SPIKE(1,I30),1,1200) 
         CALL ZERO(HILBT(1,I30),1,1200)
   30 CONTINUE 
CCCCCCCCCCCCCCCCCCCCCCCCCCC
C      J31=0 
C      DO 31 I31=2,NPTS 
C         T=DT*FLOAT(I31-1) 
C         IF(J31.GE.NTIM) GO TO 31 
C         DO 32 J32=1,NTIM 
C            IF(.NOT.(T.LE.RAYTIM(J32)+DELAY.AND. 
C     *               T+DT.GT.RAYTIM(J32)+DELAY)) GO TO 32 
C            IRAYL=0 
C            IF(RAYTIM(J32)+DELAY.GT.T+(DT/2.)) IRAYL=1 
C            DO 33 I33=1,3 
C              SPIKE(I31+IRAYL,I33)=SPIKE(I31+IRAYL,I33)+RAYMAG(I33,J32) 
C              TYPE *,' SPIKE **',SPIKE(I31+IRAYL,I33),I31+IRAYL,I33,
C     1         RAYMAG(I33,J32),I33,J32
C                  IF(JHILB.EQ.0) GO TO 33 
C                  HILBT(I31+IRAYL,I33)=HILBT(I31+IRAYL,I33) 
C     *                                 + RAYHIL(I33,J32) 
C   33       CONTINUE 
C            J31=J31 + 1 
C   32    CONTINUE 
C   31 CONTINUE
CCCCCCCCCCCCCCCCCCCCCC
      J31=0 
      DO 31 I31=2,NPTS                     ! # PTS IN SYN SEISMOGRAM
         T=DT*FLOAT(I31-1) 
         Tt=DT*FLOAT(I31) 
         IF(J31.LT.NTIM) THEN 
            DO 32 J32=1,NTIM 
ccccc          TYPE *,' T=',T,' RAYTIM+DELAY',RAYTIM(J32)+DELAY,J32
c
C the problem is right here in the value of T
C  T has round off  which makes it 9.90001
C               IF(T.LE.(RAYTIM(J32)+DELAY) .AND. 
C     *                (T+DT).GT.(RAYTIM(J32)+DELAY) ) THEN 
c  first time  9.90001 .le. 0.0+10.0 .and. 9.90001+.1 .gt. 0.0+10.0 ** pass
c  second time    10.0 .le. 0.0+10.0 .and. 10.0+.1 .gt. 0.0+10.0 **pass
c
c  SOLUTION is to calutate t+dt as  dt*float(i31)
c then
c  first time   9.90001 .le. 0.0+10.0 .and. 10.0 .gt. 0.0+10.0  ** fail
c  second time     10.0 .le. 0.0+10.0 .and. 10.1 .gt. 0.0+10.0  ** pass
c 
c----------
               IF(T.LE.(RAYTIM(J32)+DELAY) .AND. 
     *                tt.GT.(RAYTIM(J32)+DELAY) ) THEN 
ccccc       TYPE *,' RAYTIM(J32),DELAY,T,DT**',
cccc 1                       RAYTIM(J32),J32,DELAY,T,DT   
                   IRAYL=0 
                   IF(RAYTIM(J32)+DELAY.GT.T+(DT/2.)) IRAYL=1 
                   III=I31+IRAYL
                   DO 33 I33=1,3 
                       SPIKE(III,I33)=SPIKE(III,I33)+RAYMAG(I33,J32) 
cccc     TYPE *,' SPIKE **',SPIKE(III,I33),III,I33,
cccc 1    RAYMAG(I33,J32),I33,J32
                       IF(JHILB.NE.0)HILBT(III,I33)=HILBT(III,I33) 
     *                                 + RAYHIL(I33,J32) 
   33              CONTINUE 
                   J31=J31 + 1
               ENDIF 
   32       CONTINUE 
         ENDIF
   31 CONTINUE
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
cccc  WRITE(6,*) (SPIKE(M,3),M=1,NPTS) 
cccc  WRITE(6,*) NTIM 
      ET=T
      STA=STRUC(1:8) 
      YEAR=1983 
      JDAY=1 
      HOUR=0 
      MIN=0 
      ISEC=0 
      MSEC=0 
      CALL ASKTXT('SPIKE OUTPUT FILE: ',SYNOUT) 
      IBLANK=BLANK(SYNOUT) 
      IF(IBLANK.LT.2) GO TO 35 
      CALL ASKTXT('SPIKE NAME: ',NAME) 
      KEVNM=NAME(1:8) 
      DO 34 I34=1,3 
         CMPNM=COMP(I34) 
         GOTO (40,41,42) I34 
   40    CINC=0. 
         CAZ=0. 
          SOUNIT=10   
         GO TO 43 
   41    CAZ=BAZ+180. 
         CINC=90. 
          SOUNIT=11
         GO TO 43 
   42    CAZ=BAZ+270. 
         CINC=90. 
          SOUNIT=12
   43    IF(CAZ.GT.360.) CAZ=CAZ-360. 
         SYNOUT(1:IBLANK+6)=SYNOUT(1:IBLANK)//SPN(I34)
         CALL MINMAX(SPIKE(1,IOR(I34)),NPTS,DMIN,DMAX,DMEAN)
cccc     WRITE(6,*) (SPIKE(M,IOR(I34)),M=1,NPTS) 
         CALL SACIO(SYNOUT,SPIKE(1,IOR(I34)),NPTS,DT,-1) 
   34 CONTINUE 
   35 YES=YESNO('CONVOLVE W/ SOURCE FUNCTION ? ') 
      IF(.NOT.YES) GO TO 29 
      INSTRM=YESNO('INCLUDE 15-100 RINSTRM RESPONSE ? ') 
      QCORR=YESNO('INCLUDE FUTTERMAN Q ? ') 
      IF(QCORR) TQ=ASK('T/Q = ') 
      NFT=NPOWR2(NPTS) 
      CALL ASKTXT('SYNTHETIC OUTPUT FILE: ',SYNOUT) 
      CALL ASKTXT('SYNTH NAME: ',NAME) 
      KST=0 
      KEVNM=NAME(1:8) 
      STA=STRUC(1:8) 
      IF(INSTRM) RINSTR=1. 
      IBLANK=BLANK(SYNOUT) 
      IST=-1 
      DO 36 I36=1,3 
         CALL ZERO(SYNTH,1,4100) 
         IF(JHILB.EQ.1) CALL ZERO(SYNHIL,1,4100) 
         DO 37 I37=1,NPTS 
            IF(JHILB.EQ.1) SYNHIL(I37)=HILBT(I37,IOR(I36)) 
   37       SYNTH(I37)=SPIKE(I37,IOR(I36)) 
         CALL MKSEIS(SYNTH,SYNHIL,INSTRM,QCORR,TQ,NFT,DT,KST,JHILB) 
         CMPNM=COMP(I36) 
         GOTO (44,45,46) I36 
   44    CINC=0. 
         CAZ=0. 
         GO TO 47 
   45    CAZ=BAZ+180. 
         CINC=90. 
         GO TO 47 
   46    CAZ=BAZ+270. 
         CINC=90. 
   47    IF(CAZ.GT.360.) CAZ=CAZ-360. 
         SYNOUT(1:IBLANK+6)=SYNOUT(1:IBLANK)//SYN(I36) 
         CALL MINMAX(SYNTH,NPTS,DMIN,DMAX,DMEAN) 
         CALL SACIO(SYNOUT,SYNTH,NPTS,DT,-1) 
   36 CONTINUE 
      GO TO 35 
   29 AGAIN=YESNO('TRACE ANOTHER IN THE SAME MODEL ? (Y OR N) ') 
      IF(AGAIN) GO TO 6 
      CLOSE(UNIT=9) 
      IF(AMPS) CLOSE(UNIT=8) 
      STOP 
      END 
      SUBROUTINE ANOM(Q,V,AZ,P,SINI) 
C
C   CALCULATES THE AZIMUTH AND RAY PARAMETER OF A RAY DEFINED BY Q 
C     IN A MEDIUM OF VELOCITY V, ASSUMING THE SURFACE IS HORIZONTAL 
C
      DIMENSION Q(1) 
      DEG(RAD)=RAD*57.2957795 
      COSI=-Q(3) 
      SINI=SQRT(1.-COSI*COSI) 
      P=SINI/V 
C
C *** AS ALWAYS VERTICAL INCIDENCE CASE IS SPECIAL
      IF(SINI.GT..0001) THEN
       SINB=-Q(2)/SINI 
       COSB=-Q(1)/SINI 
       AZ=ATAN2(SINB,COSB) 
       AZ=DEG(AZ) 
      ELSE
       AZ=0.0
      ENDIF
C ***
  101 FORMAT(1X,5E15.7) 
      RETURN 
      END 
      FUNCTION TIMCOR(X1,X2,Q0,V) 
C
C  FINDS THE TIME DIFERENCE BETWEEN A RAY WHICH ENTERS THE 
C   LAYERING AT POINT X2 TO ONE WHICH ENTERS THE LAYERING AT 
C   X1 IF THE HALF SPACE UNIT RAY VECTOR IS Q0 AND THE HALF 
C   SPACE VELOCITY IS V 
C
      DIMENSION X1(1),X2(1),Q0(1),R(3) 
      DO 1 I=1,3 
   1  R(I)=X2(I)-X1(I) 
      CORR=DOT(R,Q0) 
      TIMCOR=CORR/V 
      RETURN 
      END 
      SUBROUTINE NORVEC(STRIKE,DIP,ETA) 
C
C  CALCULATES THE INTERFACE UNIT NORMAL VECTOR, GIVEN THE LAYER 
C    STRIKE AND DIP IN RADIANS 
C
      DIMENSION ETA(3) 
      SINS=SIN(STRIKE) 
      COSS=COS(STRIKE) 
      SIND=SIN(DIP) 
      COSD=COS(DIP) 
      ETA(1)=SIND*SINS 
      ETA(2)=-SIND*COSS 
      ETA(3)=COSD 
      RETURN 
      END 
      SUBROUTINE TIMDIS(DIST,Q,II,JJ,VEL,N,TIME,IFACE,ETA,KK,LL,Z) 
C
C   CALCULATES THE POINT A RAY, SPECIFIED BY THE N RAY UNIT NORMALS 
C     GIVEN IN Q, ENTERS THE LAYERED MEDIUM AND ITS TRAVEL-TIME IN 
C     THE LAYERED SYSTEM 
C
      DIMENSION Q(II,JJ),VEL(N),IFACE(N),ETA(KK,LL),Z(1),DIST(1) 
      TIME=0. 
C
C   CALCULATES TIME & DIST FOR THE NTH TO 2ND Q-VECTORS SINCE VECTOR 
C     #1 IS THE INCIDENT RAY 
C
      DO 1 I1=1,N-1 
         J1=N - I1 + 1 
         UNUM=ETA(3,IFACE(J1))*(Z(IFACE(J1))-DIST(3)) 
     *       -ETA(2,IFACE(J1))*DIST(2) 
     *       -ETA(1,IFACE(J1))*DIST(1) 
         U=UNUM/DOT(ETA(1,IFACE(J1)),Q(1,J1)) 
         DO 2 I2=1,3 
    2       DIST(I2)=DIST(I2) + U*Q(I2,J1) 
         TIME=ABS(U)/VEL(J1)  + TIME 
    1 CONTINUE 
      RETURN 
      END 
      SUBROUTINE SNELL(QB,VB,QA,VA,ITYPE,SINIB,SINIA) 
C
C   CALCULATES THE RAY UNIT NORMAL VECTOR, QA RESULTING FROM AN 
C     INCIDENT UNIT NORMAL VECTOR, QB INTERACTING WITH A VELOCITY 
C     INTERFACE.  THE MEDIUM VELOCITY OF QB IS VB, THE MEDIUM 
C     VELOCITY OF QA IS VA 
C
      DIMENSION QB(1),QA(1) 
      INTEGER OUNIT 
      COMMON /INNOUT/ INUNIT,OUNIT 
      TORR=FLOAT(ITYPE) 
      SINIB=SQRT(1.-QB(3)*QB(3)) 
C ****
C CHECK FOR NEAR-VERTICAL INCIDENCE. IF SINIB < 0.002, THEN RAY IS
C  SET TO TRUE VERTICAL INCIDENCE, TO AVOID INSTABILITIES IN THE 
C  CALCULATION OF THE FACTOR 'A' BELOW. THIS CORRESPONDS TO ANGLES
C  OF INCIDENCE OF LESS THAN 0.11 DEGREES, SO THIS MANIPULATION SHOULD
C  NOT CAUSE ANY SIGNIFICANT ERRORS.
C ***********************
      IF(SINIB.LE..002) THEN
        SINIB=0.0
        QB(3)=ABS(QB(3))/QB(3)
        QB(2)=0. 
        QB(1)=0. 
        SINIA=0.
        QA(1)=QB(1)
        QA(2)=QB(2)
        QA(3)=TORR*QB(3)
        RETURN
      ENDIF
C
C  PROCESS ALL OTHER RAYS
C
      SINIA=VA*SINIB/VB 
C
C   CHECK FOR PROBLEMS WITH HEAD WAVES +/OR POST CRITICALLY REFLECTED CONVERTED 
C             PHASES 
C    IF ANY EXIST, FLAG THE RAY AND RETURN 
C
      IF(SINIA.GE.1.00) THEN 
         WRITE(OUNIT,100) VB,VA,QB(3) 
         IF(TORR.LT.0..AND.QB(3).LT.0.) WRITE(OUNIT,101) 
         IF(TORR.LT.0..AND.QB(3).GE.0.) WRITE(OUNIT,102) 
         IF(TORR.GT.0.) WRITE(OUNIT,103) 
         ITYPE = -999 
         RETURN 
      ENDIF 
C ****
      IF(SINIA.LT..0001) THEN
        A=0.
       ELSE
       A=SINIA/SQRT(QB(1)*QB(1) + QB(2)*QB(2)) 
       QA(1)=A*QB(1) 
       QA(2)=A*QB(2) 
       QA(3)=TORR*(QB(3)/ABS(QB(3)))*SQRT(1. - SINIA*SINIA) 
      ENDIF
      RETURN 
  100 FORMAT(' FOR VB => VA OF',F6.3,' => ',F6.3,' AND QB = ',F6.4) 
  101 FORMAT('    ===>  A FREE SURFACE S-TO-P REFLECTION IS CRITICAL ') 
  102 FORMAT('    ===>  AN INTERNAL S-TO-P REFLECTION IS CRITICAL ') 
  103 FORMAT('    ===>  A HEAD WAVE HAS BEEN GENERATED') 
      END 
      SUBROUTINE WRTRAY(LYR,AZ,P,TIME,BAZ,P0,PORS,INIT,I4,I10,I11 
     *                  ,OLDLYR,SINI) 
C
C  WRITES THE RESULTS OF A RAY TRACING LOOP INTO UNIT 10 
C
      DIMENSION TYPE(2),WAVE(4,2),PRIM(2,2) 
      LOGICAL PORS,EMULT 
      CHARACTER TYPE*1,PRIM*2,WAVE*3 
      DATA TYPE/'P','S'/,PRIM/'PP','SS','PS','SP'/, 
     *     WAVE/'PMP','PMS','SMP','SMS','SMS','SMP','PMS','PMP'/ 
      ANGLE=ASIN(SINI) 
      ANGLE=ANGLE*57.2957795 
      EMULT=.FALSE. 
      IF(I4.NE.0) GO TO 8 
         EMULT=.TRUE. 
         GO TO 1 
    8 IF(INIT.NE.0) GO TO 1 
         IPRIM=1 
         IF(.NOT.PORS) IPRIM=2 
         IF(I4.NE.1) GO TO 6 
            ITYPE=1 
            IF(.NOT.PORS) ITYPE=2 
            WRITE(9,100) TYPE(ITYPE),BAZ,P0,TIME 
            T1=0. 
            WRITE(9,102) 
            WRITE(9,101) PRIM(IPRIM,I4),T1,AZ,P,ANGLE 
            OLDLYR=0 
            RETURN 
    6    WRITE(9,103) LYR 
         WRITE(9,102) 
         WRITE(9,104) PRIM(IPRIM,I4),LYR,TIME,AZ,P,ANGLE 
         OLDLYR=LYR 
         RETURN 
    1 IP=1 
      IF(.NOT.PORS) IP=2 
      IF(I10.NE.1) GOTO 2 
         IF(I11.EQ.1) GO TO 3 
            IWAVE=2 
            GO TO 5 
    3       IWAVE=1 
            GO TO 5 
    2 IF(I11.EQ.1) GO TO 4 
         IWAVE=4 
         GO TO 5 
    4    IWAVE=3 
    5 IF(EMULT) GO TO 9 
      IF(LYR.EQ.OLDLYR) GO TO 7 
        WRITE(9,103) LYR 
         WRITE(9,102) 
         OLDLYR=LYR 
    7 WRITE(9,105) PRIM(IP,I4),WAVE(IWAVE,IP),LYR,TIME,AZ,P,ANGLE 
      RETURN 
    9 IF(IWAVE.EQ.1.AND.IP.EQ.1) WRITE(9,106) LYR 
      WRITE(9,107) WAVE(IWAVE,IP),TIME,AZ,P,ANGLE 
      RETURN 
  100 FORMAT(///' INCIDENT ',A1,'-WAVE, BACK AZIMUTH: ',F6.2, 
     *       ' RAY PARAMETER: ',F7.4,/,' DIRECT ARRIVAL SPENDS ',F7.3, 
     *       ' SECS IN LAYERING',/,' ALL TIMES RELATIVE TO DIRECT RAY' 
     *       ,/) 
  101 FORMAT(5X,A2,5X,'DIRECT',2X,F7.3,3X,F7.2,7X,F7.4,6X,F5.2) 
  102 FORMAT(' WAVE TYPE   LAYER    TIME     AZIMUTH     RAY PARAM.', 
     *       '   ANGLE') 
  103 FORMAT(1X,/,' LAYER ',I2) 
  104 FORMAT(5X,A2,7X,I2,4X,F7.3,3X,F7.2,7X,F7.4,6X,F5.2) 
  105 FORMAT(3X,A2,A3,6X,I2,4X,F7.3,3X,F7.2,7X,F7.4,6X,F5.2) 
  106 FORMAT(63X,'EXTRA MULTIPLES FROM LAYER ',I2,/, 
     *       63X,' TYPE    TIME        AZ.          P         ANGLE') 
  107 FORMAT(64X,A3,3X,F7.3,4X,F7.2,6X,F7.4,6X,F5.2) 
      END 
      SUBROUTINE AMPCAL(AMAGB,HMAGB,AMAGA,HMAGA,STRIKE,DIP,IHILB) 
C
C SUBROUTINE TO CALCULATE AMPLITUDES FOR RAYS FROM RAY3D 
C
C   I N P U T 
C
C
      DIMENSION QB(3),QA(3),AMAGB(1),AMAGA(1),R3(3),RT(3),AT(3),AI(3), 
     *          A(3,3),HMAGA(1),HMAGB(1),RTH(3),HT(3) 
      LOGICAL FREE 
      INTEGER TYPE,OUNIT 
      COMMON /CORD/ A 
      COMMON /AMCAL/ QB,QA,VB,VA,SINIB,SINIA,VP1,VS1,RHO1, 
     *               VP2,VS2,RHO2,FREE,TYPE 
      COMMON /INNOUT/ INUNIT,OUNIT 
      CALL ZERO(R3,1,3) 
      CALL ZERO(RT,1,3) 
      CALL ZERO(AT,1,3) 
      CALL ZERO(AI,1,3) 
      CALL ZERO(HT,1,3) 
      CALL ZERO(RTH,1,3) 
      RSHPH=0. 
      RPH=0. 
      RPHX=0. 
      RPHY=0. 
      RPHZ=0. 
      RMAG=0. 
      NCODE=0 
      EPS=.0001 
      IHILB=0 
      RSHMAG=0. 
      PI=3.14159 
C ***
C  VERTICAL INCIDENCE REQUIRES SPECIAL TREATMENT
C
      IF(SINIB.GT.EPS) THEN
       COSPHI=-QB(1)/SINIB 
       SINPHI=-QB(2)/SINIB 
      ELSE
       COSPHI=-1.
       SINPHI=0.
      ENDIF
C ***
      ND=0 
      IF(ABS(QB(3))/QB(3).GT.0) ND=1 
      P=SINIB/VB 
      IF(FREE) GO TO 10 
      RO2=RHO2 
C
C   FIND NCODE FOR NON-FREE SURFACE CASE 
C
      IF(ABS(VB-VP1).GT.EPS) GO TO 1 
        CALL RCOMP(AI,1,ND,SINIB,.TRUE.) 
        IF(TYPE.LT.0) GO TO 2 
        IF(ABS(VA-VP2).LT.EPS) NCODE=3 
        IF(ABS(VA-VS2).LT.EPS) NCODE=4 
        GO TO 3 
    2   IF(ABS(VA-VP1).LT.EPS) NCODE=1 
        IF(ABS(VA-VS1).LT.EPS) NCODE=2 
        GO TO 3 
    1 IF(ABS(VB-VS1).GT.EPS) GO TO 4 
        CALL RCOMP(AI,2,ND,SINIB,.TRUE.) 
        IF(TYPE.LT.0) GO TO 5 
        IF(ABS(VA-VS2).LT.EPS) NCODE=8 
        IF(ABS(VA-VP2).LT.EPS) NCODE=7 
        GO TO 3 
    5   IF(ABS(VA-VP1).LT.EPS) NCODE=5 
        IF(ABS(VA-VS1).LT.EPS) NCODE=6 
    3 NCASE=0 
      IF(NCODE.EQ.0) GO TO 4 
      IF(NCODE.LE.4) GO TO 7 
         NCASE=4 
         GO TO 7 
C
C  FIND NCODE FOR FREE SURFACE CASE 
C
   10 RO2=0.0 
      VP2=0. 
      VS2=0. 
      IF(TYPE.EQ.0) GO TO 15 
      IF(ABS(VB-VP1).GT.EPS) GO TO 12 
         CALL RCOMP(AI,1,ND,SINIB,.TRUE.) 
         IF(ABS(VA-VS1).LT.EPS) NCODE=2 
         IF(ABS(VA-VP1).LT.EPS) NCODE=1 
         GO TO 13 
   12    IF(ABS(VB-VS1).GT.EPS) GO TO 4 
         CALL RCOMP(AI,2,ND,SINIB,.TRUE.) 
         IF(ABS(VA-VS1).LT.EPS) NCODE=4 
         IF(ABS(VA-VP1).LT.EPS) NCODE=3 
   13 NCASE=0 
      IF(NCODE.EQ.0) GO TO 4 
      IF(NCODE.LE.2) GO TO 7 
         NCASE=2 
         GO TO 7 
C
C
C  F I N D  F R E E  S U R F A C E  E F F E C T 
C
C
   15 IF(ABS(VB-VP1).LT.EPS) GO TO 16 
      IF(ABS(VB-VS1).LT.EPS) GO TO 17 
      GO TO 4 
   16 CALL RCOMP(AI,1,ND,SINIB,.TRUE.) 
      CALL COEF8(P,VP1,VS1,RHO1,VP2,VS2,0.0,5,ND,RX,RPHX) 
      CALL COEF8(P,VP1,VS1,RHO1,VP2,VS2,0.0,6,ND,RZ,RPHZ) 
      RY=0. 
      RPHY=0. 
      GO TO 18 
   17 CALL RCOMP(AI,2,ND,SINIB,.TRUE.) 
      CALL COEF8(P,VP1,VS1,RHO1,VP2,VS2,0.0,7,ND,RX,RPHX) 
      CALL COEF8(P,VP1,VS1,RHO1,VP2,VS2,0.0,8,ND,RZ,RPHZ) 
      CALL COEFSH(P,VS1,RHO1,VS2,0.0,2,RY,RPHY) 
   18 IF(ABS(RPHX+PI).GT.EPS) GO TO 22 
        RPHX=0. 
        RX=-RX 
   22 IF(ABS(RPHY+PI).GT.EPS) GO TO 23 
        RPHY=0. 
        RY=-RY 
   23 IF(ABS(RPHZ+PI).GT.EPS) GO TO 24 
        RPHZ=0. 
        RZ=-RZ 
   24 DO 19 I19=1,3 
         RTH(I19)=HMAGB(I19) 
   19    RT(I19)=AMAGB(I19) 
C
C  RT IS IN GLOBAL COORDINATES, BUT THIS IS EQUIVALENT TO INTERFACE 
C    COORDINATES FOR THE FREE SURFACE. SO TRANSFORM RT DIRECTLY TO 
C    THE RAY COORDINATE SYSTEM 
C
      CALL RTOI(RT,COSPHI,SINPHI,QB(3),.FALSE.) 
      CALL RTOI(RTH,COSPHI,SINPHI,QB(3),.FALSE.) 
      PHCK=0. 
      PHCK=ABS(RPHZ)+ABS(RPHX)+ABS(RPHY) 
      IF(PHCK.GT.EPS) IHILB=1 
      DOTAR=DOT(AI,RT) 
C ***
C VERTICAL INCIDENCE CAN SOMETIMES BLOW UP AT THIS STEP
C   CHECK FIRST
C
      IF(ABS(DOTAR).LT.EPS) GO TO 56
      DOTAR=ABS(DOTAR)/DOTAR 
   56 DOTH=DOT(AI,RTH) 
      IF(ABS(DOTH).LT.EPS) GO TO 26 
      DOTH=ABS(DOTH)/DOTH 
   26 AMH=SQRT(RTH(1)*RTH(1) + RTH(3)*RTH(3))*DOTH 
      AMB=SQRT(RT(1)*RT(1) + RT(3)*RT(3))*DOTAR 
      AMAGA(1)=RX*(AMB*COS(RPHX) - AMH*SIN(RPHX)) 
      AMAGA(2)=RY*(RT(2)*COS(RPHY) - RTH(2)*SIN(RPHY)) 
      AMAGA(3)=RZ*(AMB*COS(RPHZ) - AMH*SIN(RPHZ)) 
      HMAGA(1)=RX*(AMH*COS(RPHX) + AMB*SIN(RPHX)) 
      HMAGA(2)=RY*(RTH(2)*COS(RPHY) + RT(2)*SIN(RPHY)) 
      HMAGA(3)=RZ*(AMH*COS(RPHZ) + AMB*SIN(RPHZ)) 
      CALL RTOI(AMAGA,COSPHI,SINPHI,QB(3),.TRUE.) 
      CALL RTOI(HMAGA,COSPHI,SINPHI,QB(3),.TRUE.) 
      RETURN 
C
C
C  G E N E R A L  C O E F I C I E N T  C A L C U L A T I O N 
C
C  FIRST FIND RT, THE INCIDENT DISPLACEMENT VECTOR IN RAY COORDINATES 
C        &    RTH, THE DISTORTED DISPLACEMENT VECTOR IN RAY COORDINATES 
C
    7 CALL COORD(AMAGB,STRIKE,DIP,RT,'LOCAL',.TRUE.) 
      CALL COORD(HMAGB,STRIKE,DIP,RTH,'LOCAL',.TRUE.) 
      CALL RTOI(RT,COSPHI,SINPHI,QB(3),.FALSE.) 
      CALL RTOI(RTH,COSPHI,SINPHI,QB(3),.FALSE.) 
      CALL COEF8(P,VP1,VS1,RHO1,VP2,VS2,RO2,NCODE,ND,RMAG,RPH) 
      CALL RCOMP(R3,NCODE-NCASE,ND,SINIA,.FALSE.) 
      IF(ABS(RPH + PI).GT.EPS) GO TO 20 
         RPH=0. 
         RMAG=-RMAG 
   20 AT(2)=0.0 
C
C  IF INCIDENT & RESULTING WAVES ARE BOTH S-WAVES, FIND SH COEFICIENT 
C
      IF(NCODE.LE.4) GO TO 9 
C ***
      IF(NCODE.EQ.6) THEN
         NCODSH=1
       ELSEIF(NCODE.EQ.8) THEN
         NCODSH=2
       ELSE
         GO TO 9
      ENDIF
      CALL COEFSH(P,VS1,RHO1,VS2,RO2,NCODSH,RSHMAG,RSHPH) 
C ***
      AT(2)=RSHMAG*(RT(2)*COS(RSHPH)-RTH(2)*SIN(RSHPH)) 
      HT(2)=RSHMAG*(RTH(2)*COS(RSHPH)-RT(2)*SIN(RSHPH)) 
      IF(ABS(RSHPH+PI).LT.EPS) GO TO 9 
      IF(RSHPH.GT.EPS) IHILB=1 
    9 DOTAR=DOT(AI,RT) 
C ***
C VERTICAL INCIDENCE CAN SOMETIMES BLOW UP AT THIS STEP
C     CHECK FIRST
C
      IF(ABS(DOTAR).LT.EPS) GO TO 55
      DOTAR=ABS(DOTAR)/DOTAR 
   55 AMB=SQRT(RT(1)*RT(1) + RT(3)*RT(3))*DOTAR 
C ***
      DOTH=DOT(AI,RTH) 
      IF(ABS(DOTH).LT.EPS) GO TO 25 
      DOTH=ABS(DOTH)/DOTH 
   25 AMH=SQRT(RTH(1)*RTH(1) + RTH(3)*RTH(3))*DOTH 
      ATMAG=RMAG*(AMB*COS(RPH)-AMH*SIN(RPH)) 
      HTMAG=RMAG*(AMH*COS(RPH)+AMB*SIN(RPH)) 
      IF(RPH.GT.EPS) IHILB=1 
      AT(1)=ATMAG*R3(1) 
      AT(3)=ATMAG*R3(3) 
      HT(1)=HTMAG*R3(1) 
      HT(3)=HTMAG*R3(3) 
      CALL RTOI(AT,COSPHI,SINPHI,QB(3),.TRUE.) 
      CALL RTOI(HT,COSPHI,SINPHI,QB(3),.TRUE.) 
      CALL COORD(AT,STRIKE,DIP,AMAGA,'GLOBE',.TRUE.) 
      CALL COORD(HT,STRIKE,DIP,HMAGA,'GLOBE',.TRUE.) 
      RETURN 
    4 WRITE(OUNIT,102) VA,VB,VP1,VS1,VP2,VS2 
  102 FORMAT(' NCODE = 0 FOR ',6F6.2) 
      RETURN 
      END 
      SUBROUTINE RTOI(R,COSP,SINP,QB,DIRTCN) 
C
C   TRANSFORMS A VECTOR R FROM THE RAY COORDINATE SYSTEM 
C     TO THE INTERFACE COORDINATE SYSTEM AND VICE VERSA 
C
C   IF DIRTCN = .TRUE.  RAY => INTERFACE 
C      DIRTCN = .FALSE. INTERFACE => RAY 
C
C   QB IS THE Z COMPONENT OF THE RAY IN THE INTERFACE SYSTEM 
C
      DIMENSION R(1) 
      LOGICAL DIRTCN 
      Q=ABS(QB)/QB 
      R(3)=R(3)*(-Q) 
      IF(DIRTCN) GO TO 1 
      XR=R(1)*COSP + R(2)*SINP 
      YR=R(1)*SINP - R(2)*COSP 
      R(1)=XR*Q 
      R(2)=YR 
      RETURN 
    1 XR=R(1)*Q 
      XL=+XR*COSP + R(2)*SINP 
      YL= XR*SINP - R(2)*COSP 
      R(1)=XL 
      R(2)=YL 
      RETURN 
      END 
      SUBROUTINE RCOMP(R3,NCODE,ND,SINI,INCDNT) 
C
C   RESOLVES A REFLECTION COEFICIENT R FROM S/R COEF8 INTO 
C     X AND Z COMPONENTS (IN THE RAY COORDINATE SYSTEM) 
C     GIVEN THE RESULTING RAY TYPE: 
C       REFLECTED P => NCODE = 1 
C       REFLECTED S => NCODE = 2 
C       TRANSMITTED P => NCODE = 3 
C       TRANSMITTED S => NCODE = 4 
C
      DIMENSION R3(1) 
      LOGICAL INCDNT 
      COSI=SQRT(1. - SINI*SINI) 
      R3(2)=0. 
      IF(INCDNT) GO TO 10 
      IF(ND.NE.0) GO TO 5 
      GO TO (1,2,3,4) NCODE 
    1 R3(3)=COSI 
      R3(1)=SINI 
      RETURN 
    2 R3(3)=SINI 
      R3(1)=-COSI 
      RETURN 
    3 R3(3)=-COSI 
      R3(1)=SINI 
      RETURN 
    4 R3(3)=SINI 
      R3(1)=COSI 
      RETURN 
    5 GO TO (6,7,8,9) NCODE 
    6 R3(3)=COSI 
      R3(1)=-SINI 
      RETURN 
    7 R3(3)=-SINI 
      R3(1)=-COSI 
      RETURN 
    8 R3(3)=-COSI 
      R3(1)=-SINI 
      RETURN 
    9 R3(3)=-SINI 
      R3(1)=COSI 
      RETURN 
   10 IF(ND.NE.0) GO TO 11 
      GO TO (3,4) NCODE 
   11 GO TO (8,9) NCODE 
      END 
      SUBROUTINE MKSEIS(X,Y,INSTRM,QCORR,TQ,NFT,DT,KST,IHILB) 
      COMPLEX X(1),WAVE,FSORCE,Y(1) 
      DIMENSION TRAP(4) 
      LOGICAL INSTRM,QCORR,OUNIT 
      COMMON /INNOUT/ INUNIT,OUNIT 
      DATA PI/3.141592654/ 
      FCUT=.004 
      NFPTS=NFT/2 + 1 
      FNY=1./(2.*DT) 
      DELF=FNY/FLOAT(NFT/2) 
      CALL DFFTR(X,NFT,'FORWARD',DT) 
      IF(IHILB.EQ.1) CALL DFFTR(Y,NFT,'FORWARD',DT) 
      IF(KST.GT.0) GO TO 6 
    1 ISORFN=IASK('PICK SOURCE WAVELET (1-7,NOT 6): ') 
      IF(ISORFN.EQ.6) GO TO 1 
      WAVE=FSORCE(ISORFN,0.,0.,KST,A,B,TT,WO,TRAP) 
    6 DO 2 I=1,NFPTS 
         F=FLOAT(I-1)*DELF 
         WAVE=(1.,0.) 
         WAVE=FSORCE(ISORFN,F,0.,KST,A,B,TT,WO,TRAP) 
         XR=1. 
         XI=0. 
         IF(.NOT.INSTRM) GOT O 3 
            CALL SEISIO(F,3000.,XR,XI,+1) 
    3    IF(.NOT.QCORR) GO TO 4 
            IF(F.LT.FCUT) GO TO 4 
               WAVE=WAVE*CMPLX(EXP(-PI*F*TQ),0.) 
    5          DFAC=F*TQ*ALOG(ABS(F/FCUT)**2-1.) 
               DR=COS(DFAC) 
               DI=SIN(DFAC) 
               WAVE=WAVE*CMPLX(DR,DI) 
    4     X(I)=WAVE*X(I)*CMPLX(XR,XI) 
          IF(IHILB.EQ.0) GO TO 2 
          X(I)=X(I) + Y(I)*CMPLX(AIMAG(WAVE),-REAL(WAVE))*CMPLX(XR,XI) 
    2 CONTINUE 
      CALL DFFTR(X,NFT,'INVERSE',DELF) 
      RETURN 
      END 
      SUBROUTINE RAYFIN(IQ,I4,I10,I11,LNUMBR,DFLAG,MFLAG) 
      DIMENSION STRIKE(100),DIP(100),Z(100),ALPHA(100),BETA(100), 
     *          ETA(3,100),Q(3,5000),Q0(3),V(2,100),QV(5000),RAYDIS(3), 
     *          QLOC1(3),QLOC2(3),A(3,3),IFACE(5000),LAYER(100), 
     *          AMAG(3,5000),HMAG(3,5000),RAYMAG(3,5000),RAYHIL(3,5000), 
     *          RAYTIM(5000),DIRECT(3),RHO(100) 
      LOGICAL PORS,AMPS,FREE,DFLAG,MFLAG 
      INTEGER TRANS,REFL,TYPE 
      COMMON /CORD/ A 
      COMMON /AMCAL/ QLOC1,QLOC2,VB,VA,SINIB,SINIA,VP1,VS1,RHO1, 
     *               VP2,VS2,RHO2,FREE,TYPE 
      COMMON /TRANSM/ Q,QV,V,ALPHA,BETA,RHO,STRIKE,DIP,IFACE,JHILB, 
     *                AMAG,HMAG,LAYER,AMPS,TRANS,REFL,NLYRS 
      COMMON /RAYWRT/ ETA,Z,RAYMAG,RAYHIL,RAYTIM,NTIM,P0,PORS, 
     *                OLDLYR,Q0,DIRECT,TDIREC,BAZ 
      CALL ZERO(RAYDIS,1,3) 
      CALL TIMDIS(RAYDIS,Q,3,5000,QV,IQ,TIME,IFACE,ETA,3,100,Z) 
      INIT=1 
      IF(.NOT.DFLAG) GO TO 1 
         TDIREC=TIME 
         TIME=0. 
         INIT=0. 
         DO 3 I3=1,3 
    3    DIRECT(I3)=RAYDIS(I3) 
         GO TO 2 
    1 TIME=TIME + TIMCOR(DIRECT,RAYDIS,Q0,V(1,NLYRS))-TDIREC 
      IF(.NOT.DFLAG.AND..NOT.MFLAG) INIT=0 
    2 CALL ANOM(Q(1,IQ),QV(IQ),AZANOM,PANOM,ANGLE) 
      IF(.NOT.AMPS) GO TO 26 
         FREE=.TRUE. 
         TYPE=0 
         DO 52 I52=1,3 
   52    QLOC1(I52)=Q(I52,IQ) 
         VB=QV(IQ) 
         SINIB=ANGLE 
         VA=0. 
         SINIA=0. 
         VP1=ALPHA(1) 
         VS1=BETA(1) 
         RHO1=RHO(1) 
         RHO2=0. 
         VP2=0. 
         VS2=0. 
         CALL AMPCAL(AMAG(1,IQ),HMAG(1,IQ), 
     *               RAYMAG(1,NTIM),RAYHIL(1,NTIM), 
     *               0.,0.,IHILB) 
         IF(IHILB.EQ.1) JHILB=1 
         FREE=.FALSE. 
         RAYTIM(NTIM)=TIME 
         NTIM=NTIM+1 
   26 CONTINUE 
      CALL WRTRAY(LNUMBR,AZANOM,PANOM,TIME,BAZ,P0,PORS, 
     *            INIT,I4,I10,I11,OLDLYR,ANGLE) 
      RETURN 
      END 
      SUBROUTINE TRNSMT(LOOPST,LOOPED,IQ,IV,UP) 
C
C ******************* 
C
C     CALCULATES THE AMPLITUDE OF A WAVE TRANSMITTED THROUGH 
C     A STACK OF LAYERS 
C
C ******************* 
C
      DIMENSION STRIKE(100),DIP(100),ALPHA(100),BETA(100), 
     *          RHO(100),Q(3,5000),V(2,100),QV(5000), 
     *          QLOC1(3),QLOC2(3),A(3,3),IFACE(5000),LAYER(100), 
     *          AMAG(3,5000),HMAG(3,5000) 
      LOGICAL AMPS,FREE,UP 
      INTEGER TRANS,REFL,TYPE,ITYPE 
      COMMON /CORD/ A 
      COMMON /AMCAL/ QLOC1,QLOC2,VB,VA,SINIB,SINIA,VP1,VS1,RHO1, 
     *               VP2,VS2,RHO2,FREE,TYPE 
      COMMON /TRANSM/ Q,QV,V,ALPHA,BETA,RHO,STRIKE,DIP,IFACE,JHILB, 
     *                AMAG,HMAG,LAYER,AMPS,TRANS,REFL,NLYRS 
      DO 7 I7=LOOPST,LOOPED-1 
         J7=LOOPED - I7 + 1 
         IF(.NOT.UP) J7=I7 
         K7=J7-1 
         IF(.NOT.UP) K7=K7+1 
         CALL COORD(Q(1,IQ),STRIKE(J7),DIP(J7),QLOC1,'LOCAL', 
     *              .FALSE.) 
         VB=QV(IQ) 
         VA=V(IV,K7) 
         ITYPE=TRANS 
         CALL SNELL(QLOC1,VB,QLOC2,VA,ITYPE,SINIB,SINIA) 
C
C   IF ITYPE RETURNS AS -999, THEN A PROBLEM PHASE EXISTS 
C      IQ IS FLAGGED FOR RETURN TO MAIN PROGRAM -- RAY WILL BE SKIPPED 
C
         IF(ITYPE.EQ.-999) THEN 
            IQ=-999 
            RETURN 
         ENDIF 
         IF(.NOT.AMPS) GO TO 19 
            VP2=ALPHA(K7) 
            VS2=BETA(K7) 
            RHO2=RHO(K7) 
            TYPE=TRANS 
            CALL AMPCAL(AMAG(1,IQ),HMAG(1,IQ), 
     *                  AMAG(1,IQ+1),HMAG(1,IQ+1) 
     *                 ,STRIKE(J7),DIP(J7),IHILB) 
            IF(IHILB.EQ.1) JHILB=1 
            VP1=VP2 
            VS1=VS2 
            RHO1=RHO2 
   19    QV(IQ+1)=VA 
         CALL COORD(QLOC2,STRIKE(J7),DIP(J7),Q(1,IQ+1),'GLOBE', 
     *              .TRUE.) 
         IQ=IQ+1 
         IFACE(IQ)=J7 
    7 CONTINUE 
      RETURN 
      END 
      SUBROUTINE RAYDWN(IQREF,I10,LYREF,IQ) 
C
C ************** 
C
C     SUBROUTINE TO REFLECT A RAY FROM THE FREE SURFACE THEN 
C                PROPAGATE IT DOWN TO A DESIGNATED INTERFACE 
C
C ************** 
C
      DIMENSION STRIKE(100),DIP(100),ALPHA(100),BETA(100), 
     *          RHO(100),Q(3,5000),V(2,100),QV(5000), 
     *          QLOC1(3),QLOC2(3),A(3,3),IFACE(5000),LAYER(100), 
     *          AMAG(3,5000),HMAG(3,5000) 
      LOGICAL AMPS,FREE 
      INTEGER TRANS,REFL,TYPE,ITYPE 
      COMMON /CORD/ A 
      COMMON /AMCAL/ QLOC1,QLOC2,VB,VA,SINIB,SINIA,VP1,VS1,RHO1, 
     *               VP2,VS2,RHO2,FREE,TYPE 
      COMMON /TRANSM/ Q,QV,V,ALPHA,BETA,RHO,STRIKE,DIP,IFACE,JHILB, 
     *                AMAG,HMAG,LAYER,AMPS,TRANS,REFL,NLYRS 
      IQ=IQREF 
C
C  TAKE RAY DOWN TO THE REFLECTING INTERFACE -- 
C
C   DO REFLECTION FROM FREE SURFACE FIRST 
C
      CALL COORD(Q(1,IQ),STRIKE(1),DIP(1),QLOC1,'LOCAL', 
     *           .FALSE.) 
      VB=QV(IQ) 
      VA=V(I10,1) 
      TYPE=REFL 
      ITYPE=TYPE 
      CALL SNELL(QLOC1,VB,QLOC2,VA,ITYPE,SINIB,SINIA) 
C
C   IF ITYPE RETURNS AS -999, THEN A PROBLEM PHASE EXISTS 
C      IQ IS FLAGGED FOR RETURN TO MAIN PROGRAM -- RAY WILL BE SKIPPED 
C
      IF(ITYPE.EQ.-999) THEN 
         IQ=-999 
         RETURN 
      ENDIF 
      IF(.NOT.AMPS) GO TO 20 
         FREE=.TRUE. 
         CALL AMPCAL(AMAG(1,IQ),HMAG(1,IQ), 
     *               AMAG(1,IQ+1),HMAG(1,IQ+1), 
     *               STRIKE(1),DIP(1),IHILB) 
         IF(IHILB.EQ.1) JHILB=1 
         FREE=.FALSE. 
   20    QV(IQ+1)=VA 
         CALL COORD(QLOC2,STRIKE(1),DIP(1),Q(1,IQ+1),'GLOBE' 
     *              ,.TRUE.) 
         IQ=IQ+1 
         IFACE(IQ)=1 
C
C   NOW TRANSMIT WAVE DOWN TO REFLECTING INTERFACE 
C
      IF(LYREF.EQ.2) RETURN 
C
C  IQ COULD BE RETURNED AS -999 FROM S/R TRNSMT -- RAY WOULD BE SKIPPED 
C
      CALL TRNSMT(2,LYREF,IQ,I10,.FALSE.) 
      RETURN 
      END 
      SUBROUTINE RAYUP(IQREF,I11,LYREF,IQ) 
C
C ************** 
C
C     SUBROUTINE TO REFLECT A RAY OFF AN INTERFACE AT DEPTH THEN 
C                TRANSMIT IT BACK UP TO THE FREE SURFACE 
C
C ************** 
C
      DIMENSION STRIKE(100),DIP(100),ALPHA(100),BETA(100), 
     *          RHO(100),Q(3,5000),V(2,100),QV(5000), 
     *          QLOC1(3),QLOC2(3),A(3,3),IFACE(5000),LAYER(100), 
     *          AMAG(3,5000),HMAG(3,5000) 
      LOGICAL AMPS,FREE 
      INTEGER TRANS,REFL,TYPE,ITYPE 
      COMMON /CORD/ A 
      COMMON /AMCAL/ QLOC1,QLOC2,VB,VA,SINIB,SINIA,VP1,VS1,RHO1, 
     *               VP2,VS2,RHO2,FREE,TYPE 
      COMMON /TRANSM/ Q,QV,V,ALPHA,BETA,RHO,STRIKE,DIP,IFACE,JHILB, 
     *                AMAG,HMAG,LAYER,AMPS,TRANS,REFL,NLYRS 
      IQ=IQREF 
      VP1=ALPHA(LYREF-1) 
      VS1=BETA(LYREF-1) 
      RHO1=RHO(LYREF-1) 
C
C  DO THE REFLECTION OFF THE INTERFACE FIRST 
C
      J12=LYREF 
      CALL COORD(Q(1,IQ),STRIKE(J12),DIP(J12),QLOC1, 
     *           'LOCAL',.FALSE.) 
      VB=QV(IQ) 
      VA=V(I11,J12-1) 
      TYPE=REFL 
      ITYPE=TYPE 
      CALL SNELL(QLOC1,VB,QLOC2,VA,ITYPE,SINIB,SINIA) 
C
C   IF ITYPE RETURNS AS -999, THEN A PROBLEM PHASE EXISTS 
C      IQ IS FLAGGED FOR RETURN TO MAIN PROGRAM -- RAY WILL BE SKIPPED 
C
      IF(ITYPE.EQ.-999) THEN 
         IQ=-999 
         RETURN 
      ENDIF 
      IF(.NOT.AMPS) GO TO 22 
         VP2=ALPHA(J12) 
         VS2=BETA(J12) 
         RHO2=RHO(J12) 
         CALL AMPCAL(AMAG(1,IQ),HMAG(1,IQ), 
     *               AMAG(1,IQ+1),HMAG(1,IQ+1), 
     *               STRIKE(J12),DIP(J12),IHILB) 
         IF(IHILB.EQ.1) JHILB=1 
   22 QV(IQ+1)=VA 
      CALL COORD(QLOC2,STRIKE(J12),DIP(J12),Q(1,IQ+1), 
     *           'GLOBE',.TRUE.) 
      IQ=IQ+1 
      IFACE(IQ)=J12 
C
C NOW TRANSMIT WAVE BACK TO SURFACE 
C
      IF(LYREF.EQ.2) RETURN 
C
C   IQ COULD BE RETURNED AS -999 FROM S/R TRNSMT -- RAY WOULD BE SKIPPED 
C
      CALL TRNSMT(2,LYREF,IQ,I11,.TRUE.) 
      RETURN 
      END 

